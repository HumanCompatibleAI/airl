import os.path as osp

from sacred.observers import FileStorageObserver
from stable_baselines.common.vec_env import VecEnvWrapper
import tensorflow as tf

import imitation.envs.examples  # noqa: F401
from imitation.policies import serialize
from imitation.scripts.config.eval_policy import eval_policy_ex
from imitation.util import rollout, util


class InteractiveRender(VecEnvWrapper):
  def __init__(self, venv):
    super().__init__(venv)

  def reset(self):
    ob = self.venv.reset()
    self.venv.render()
    return ob

  def step_wait(self):
    ob = self.venv.step_wait()
    self.venv.render()
    return ob


@eval_policy_ex.main
def eval_policy(_seed: int, env_name: str, timesteps: int, num_vec: int,
                parallel: bool, render: bool, policy_type: str,
                policy_path: str, log_dir: str):
  """Rolls a policy out in an environment, collecting statistics.

  Args:
    _seed: generated by Sacred.
    env_name: Gym environment identifier.
    timesteps: Minimum number of timesteps to evaluate for.
    num_vec: Number of environments to run simultaneously.
    parallel: If True, use `SubprocVecEnv` for true parallelism; otherwise,
        uses `DummyVecEnv`.
    render: If True, renders interactively to the screen.
    policy_type: A unique identifier for the saved policy,
        defined in POLICY_CLASSES.
    policy_path: A path to the serialized policy.
    log_dir: The directory to log intermediate output to. (As of 2019-07-19
        this is just episode-by-episode reward from bench.Monitor.)

  Returns:
    Statistics returned by `imitation.util.rollout.rollout_stats`.
  """
  tf.logging.set_verbosity(tf.logging.INFO)
  tf.logging.info('Logging to %s', log_dir)

  venv = util.make_vec_env(env_name, num_vec, seed=_seed,
                           parallel=parallel, log_dir=log_dir)
  if render:
    venv = InteractiveRender(venv)
  # TODO(adam): add support for videos using VideoRecorder?

  with serialize.load_policy(policy_type, policy_path, venv) as policy:
    stats = rollout.rollout_stats(policy, venv, n_timesteps=timesteps)

  return stats


if __name__ == "__main__":
  observer = FileStorageObserver.create(
      osp.join('output', 'sacred', 'eval_policy'))
  eval_policy_ex.observers.append(observer)
  eval_policy_ex.run_commandline()
